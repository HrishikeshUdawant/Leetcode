    //m1
  //TC  O(3n)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int>Prefix(n,1);
        vector<int>Suffix(n,1);
        vector<int>ans(n,1);
        for(int i=1;i<n;i++){
            Prefix[i]=Prefix[i-1]*nums[i-1];
        }
        for(int i=n-2;i>=0;i--){
            Suffix[i]=Suffix[i+1]*nums[i+1];
        }
        for(int i=0;i<n;i++){
            ans[i]=Prefix[i]*Suffix[i];
        }
        return ans;
    }
};



            //optimization space complexity - O(n)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        //vector<int>Prefix(n,1);
        vector<int>Suffix(n,1);
        vector<int>ans(n,1);

        int prefix=1;
        int suffix=1;

        for(int i=1;i<n;i++){
            //Prefix[i]=Prefix[i-1]*nums[i-1];
            ans[i]=ans[i-1]*nums[i-1];
        }
        for(int i=n-2;i>=0;i--){
            //Suffix[i]=Suffix[i+1]*nums[i+1];
            suffix *= nums[i+1];
            ans[i] *= suffix;
        
        }
        /*
        for(int i=0;i<n;i++){
            ans[i]=Prefix[i]*Suffix[i];
        }
        */
        return ans;
    }
};
